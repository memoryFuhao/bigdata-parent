package com.video.bigdata.bigdatasolr.controller;


import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.video.bigdata.bigdatasolr.utils.JsonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.slf4j.SLF4JLogger;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.CloudSolrServer;
import org.apache.solr.client.solrj.request.UpdateRequest;
import org.apache.solr.client.solrj.response.FacetField;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.client.solrj.response.UpdateResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.noggit.JSONUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class SolrIndex {

    private static final Logger log = LoggerFactory.getLogger(SLF4JLogger.class);
    static final String zkHost = "master:2181,slave1:2181,slave2:2181,slave3:2181,slave4:2181/solr";
    static final int socketTimeout = 20000;
    static final int zkConnectTimeout = 1000;
    //Solr5之后把Server字样都改为了Client，使用的是CloudSolrClient
    static CloudSolrServer cloudSolrServer = null;

    static {
        cloudSolrServer = new CloudSolrServer(zkHost);
        cloudSolrServer.setZkClientTimeout(zkConnectTimeout);
        cloudSolrServer.setZkConnectTimeout(socketTimeout);
        cloudSolrServer.connect();
    }

    /**
     * 查找
     * @param paramJson
     */
    public void query(String paramJson) {
        if(StringUtils.isBlank(paramJson)){
            return;
        }
        JSONObject jsonObject = JSON.parseObject(paramJson);
        String collectionName = jsonObject.getString("collectionName");
        cloudSolrServer.setDefaultCollection(collectionName);

        SolrQuery query = resolveParams(jsonObject.getJSONArray("params"));
        if(StringUtils.isNotBlank(jsonObject.getString("orderField"))){
            query.setSort(jsonObject.getString("orderField"),
                    jsonObject.getString("order").equals("ASC") ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc);
        }
        Integer pageNum = jsonObject.getInteger("pageNum");
        Integer pageSize = jsonObject.getInteger("pageSize");
        if(pageNum!=null){
            if(pageSize == null){
                pageSize = 10;
            }
        }else{
            //默认第一页，每页10条
            pageNum = 1;
            pageSize = 10;
        }
        query.setStart((pageNum-1)*pageSize);
        query.setRows(pageSize);
        try {
            QueryResponse response = cloudSolrServer.query(query);
            SolrDocumentList docs = response.getResults();
            for (SolrDocument doc : docs) {
                String docJson = JSONUtil.toJSON(doc);
                log.info("查询返回结果："+docJson);
            }
        } catch (Exception e) {
            log.error("查询错误",e);
        } finally {

        }
    }
    /**
     * 分组统计
     * @param cloudSolrServer
     * @param paramsJson
     */
    public String queryByGroup(CloudSolrServer cloudSolrServer,String paramsJson){
        if(StringUtils.isBlank(paramsJson)){
            return "{'error':'parameters is empty!'}";
        }
        try {
            JSONObject jsonObject = JSON.parseObject(paramsJson);
            String collectionName = jsonObject.getString("collectionName");
            cloudSolrServer.setDefaultCollection(collectionName);
            SolrQuery query = new SolrQuery();
            //具体请查询group和facet的区别，多个字段group使用facet.pivot
            query.setFacet(true);
            JSONArray fieldArray = jsonObject.getJSONArray("field");
            StringBuffer fieldBuffer = new StringBuffer(100);
            for(int i = 0;i<fieldArray.size();i++){
                fieldBuffer.append(fieldArray.get(i));
                if(i != fieldArray.size()-1){
                    fieldBuffer.append(",");
                }
            }
            query.add("facet.pivot",fieldBuffer.toString());
            query.setFacetLimit(jsonObject.getInteger("limit") == null ? 10 : jsonObject.getInteger("limit"));
            String timeField = jsonObject.getString("timeField");
            if(StringUtils.isNotBlank(timeField)){
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-ddTHH:mm:ssZ");
                String from = jsonObject.getString("from");
                String to = jsonObject.getString("to");
                String gap = jsonObject.getString("gap");
                query.addDateRangeFacet(timeField,sdf.parse(from),sdf.parse(to),gap);
            }
            QueryResponse queryResponse = cloudSolrServer.query(query);
            List<FacetField> facetFields = queryResponse.getFacetFields();//返回facet列表
            Map<String,Object> map = new HashMap<>();
            for (FacetField facet : facetFields) {
                List<FacetField.Count> counts = facet.getValues();
                for (FacetField.Count count : counts) {
                    map.put(count.getName(),count.getCount());
                }
            }
            return JSON.toJSONString(map);
        } catch (Exception e) {
            log.error("分组统计异常",e);
        }
        return null;
    }

    public String queryByCollections(CloudSolrServer cloudSolrServer,String paramsJson){
        if(StringUtils.isBlank(paramsJson)){
            return "{'error':'parameters is empty!'}";
        }
        JSONObject jsonObject = JSONObject.parseObject(paramsJson);
        JSONArray paramsArray = jsonObject.getJSONArray("params");
        SolrQuery query = resolveParams(paramsArray);
        Integer pageNum = jsonObject.getInteger("pageNum");
        Integer pageSize = jsonObject.getInteger("pageSize");
        if(pageNum!=null){
            if(pageSize == null){
                pageSize = 10;
            }
        }else{
            //默认第一页，每页10条
            pageNum = 1;
            pageSize = 10;
        }
        query.setStart((pageNum-1)*pageSize);
        query.setRows(pageSize);
        JSONArray collectionNames = jsonObject.getJSONArray("collectionName");
        SolrDocumentList resultList = new SolrDocumentList();
        try {
            for(int i = 0;i<collectionNames.size();i++){
                String collectionName = collectionNames.getString(i);
                cloudSolrServer.setDefaultCollection(collectionName);
                QueryResponse queryResponse = cloudSolrServer.query(query);
                SolrDocumentList solrDocuments = queryResponse.getResults();
                resultList.addAll(solrDocuments);
            }
        } catch (SolrServerException e) {
            log.error("多个Collections查询异常",e);
        }
        return JSONObject.toJSONString(new HashMap<String,Object>().put("resultBeans",resultList));
    }
    /**
     * 添加索引
     * @param cloudSolrServer
     */
    public String addIndex(CloudSolrServer cloudSolrServer,String paramsJson) {
        try {
            if(StringUtils.isBlank(paramsJson)){
                return "{'error':'parameters is empty!'}";
            }
            JSONObject jsonObject = JSON.parseObject(paramsJson);
            String collectionName = jsonObject.getString("collectionName");
            cloudSolrServer.setDefaultCollection(collectionName);
            JSONArray beans = jsonObject.getJSONArray("beans");
            int rows = 0;
            for(int i = 0;i<beans.size();i++){
                SolrInputDocument solrInputDocument = new SolrInputDocument();
                Map<String,Object> map = new HashMap<String,Object>();
                JsonUtils.objectAnalysis(null, beans.getJSONObject(i),map);
                Set<Map.Entry<String, Object>> entries = map.entrySet();
                for(Map.Entry<String,Object> entry : entries){
                    solrInputDocument.setField(entry.getKey(),entry.getValue());
                }
                UpdateResponse updateResponse = cloudSolrServer.add(solrInputDocument);
                cloudSolrServer.commit();
                rows++;
                log.info("添加数据返回:"+updateResponse.toString());
            }
            return String.format("{'rows':%s}",rows);
        } catch (Exception e) {
            log.error("添加索引异常",e);
            return "";
        }
    }
    /**
     * 通过条件删除指定Collection中的Index
     * @param cloudSolrServer
     * @param paramsJson
     */
    public String deleteIndex(CloudSolrServer cloudSolrServer, String paramsJson) {
        if(StringUtils.isBlank(paramsJson)){
            return "{'error':'parameters is empty!'}";
        }
        JSONObject jsonObject = null;
        try {
            jsonObject = JSON.parseObject(paramsJson);
            String collectionName = jsonObject.getString("collectionName");
            if(StringUtils.isBlank(collectionName)){
                return "{'error':'collectionName is null'}";
            }
            cloudSolrServer.setDefaultCollection(collectionName);
            JSONArray params = jsonObject.getJSONArray("params");
            SolrQuery query = resolveParams(params);
            UpdateResponse updateResponse = cloudSolrServer.deleteByQuery(query.toString());
            log.info("删除数据返回结果："+updateResponse);
            return updateResponse.toString();
        } catch (JSONException e){
            log.error("Json解析错误",e);
            return "{'error':'format error!'}";
        } catch (Exception e) {
            log.error("删除数据异常！",e);
        }
        return "";
    }
    /**
     * @param cloudSolrServer
     * @param paramsJson
     * 更新需要把所有数据stored，这样子简单、省时、并且减少网络开销，但是耗费空间。以空间换时间
     * All the fields of our document are marked as stored=”true”.
     * We need that in order to update single fields of those documents.
     * Solr uses stored fields to get data from them and than uses this data
     * to reconstruct the document that will be removed and indexed again.
     * Of course the newly indexed document will have the changes we told Solr we want.
     * We gain simplicity, time and networks usage, but we need sacrifice the index size because of that.
     */
    public String updateIndex(CloudSolrServer cloudSolrServer,String paramsJson){
        if(StringUtils.isBlank(paramsJson)){
            return "{error:'parameters is empty!'}";
        }
        JSONObject jsonObject = JSON.parseObject(paramsJson);
        String collectionName = jsonObject.getString("collectionName");
        cloudSolrServer.setDefaultCollection(collectionName);
        JSONArray paramsArray = jsonObject.getJSONArray("params");
        SolrQuery solrQuery = resolveParams(paramsArray);

        UpdateRequest updateRequest = new UpdateRequest();
        updateRequest.setAction(UpdateRequest.ACTION.COMMIT,false,false);

        SolrInputDocument solrInputDocument = new SolrInputDocument();
        solrInputDocument.addField("id", "002");
        solrInputDocument.addField("name", "Rahman");
        solrInputDocument.addField("age","27");
        solrInputDocument.addField("addr","hyderabad");

        updateRequest.add(solrInputDocument);
        try {
            UpdateResponse rsp = updateRequest.process(cloudSolrServer);
        } catch (SolrServerException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return  null;
    }

    private SolrQuery resolveParams(JSONArray paramsArray){
        SolrQuery query = new SolrQuery();
        //具体请查询solr q与fq的区别
        query.set("q","*:*");
        StringBuffer fqBuffer = new StringBuffer();
        Iterator<Object> iterator = paramsArray.iterator();
        while (iterator.hasNext()){
            JSONObject object = (JSONObject)iterator.next();
            if(StringUtils.isBlank(object.getString("type"))){
                //默认EQ
                query.setQuery(object.getString("field")+":"+object.getJSONArray("value").get(0));
            }else{
                String type = object.getString("type");
                String key = object.getString("field");
                JSONArray valueArray = object.getJSONArray("value");
                switch (type){
                    case "EQ":
                        fqBuffer.append(" && "+key+":"+valueArray.get(0));
                        break;
                    case "NOT_EQ":
                        fqBuffer.append(" && "+"-"+key+":"+valueArray.get(0));
                        break;
                    case "LESS":
                        fqBuffer.append(" && "+key+":{* TO "+valueArray.get(0)+"}");
                        break;
                    case "LESS_EQ":
                        fqBuffer.append(" && "+key+":[* TO "+valueArray.get(0)+"]");
                        break;
                    case "MORE":
                        fqBuffer.append(" && "+key+":{"+valueArray.get(0)+" TO *}");
                        break;
                    case "MORE_EQ":
                        fqBuffer.append(" && "+key+":["+valueArray.get(0)+" TO *]");
                        break;
                    case "LIKE":
                        fqBuffer.append(" && "+key+":*"+valueArray.get(0)+"*");
                        break;
                    case "IN":
                        Iterator<Object> valueIterator = valueArray.iterator();
                        StringBuffer sb = new StringBuffer();
                        while (valueIterator.hasNext()){
                            sb.append(valueIterator.next()+" ");
                        }
                        fqBuffer.append(" && "+key+":("+sb.toString()+")");
                        break;
                    case "BETWEEN_AND":
                        fqBuffer.append(" && "+key+":["+valueArray.get(0)+" TO "+valueArray.get(1)+"]");
                        break;
                    case "ISNULL":
                        fqBuffer.append(" && "+"-"+key+":[* TO *] AND *:*");
                        break;
                    case "ISNOTNULL":
                        fqBuffer.append(" && "+key+":[* TO *] AND *:*");
                        break;
                }
            }
        }
        String fq = fqBuffer.toString();
        fq = fq.substring(fq.indexOf("&&")+3);
        query.addFilterQuery(fq);
        return query;
    }

    private void setQueryParams(SolrQuery query) {
        query.setFields("id", "title", "content", "releaseDate");
        query.setRows(20).setStart(0);
        query.setHighlight(true).setHighlightFragsize(200)
                .setHighlightSimplePre("<span font='red'>").setHighlightSimplePost("</span>")
                .set("hl.fl", "title,content");
    }
    private void output(QueryResponse result) {
        SolrDocumentList list = result.getResults();
        Map<String, Map<String, List<String>>> hlMap = result.getHighlighting();
        for (SolrDocument doc : list) {
            output(doc, hlMap);
        }
    }

    private void output(SolrDocument doc, Map<String, Map<String, List<String>>> hlMap) {
        String id = (String) doc.getFieldValue("id");
        String title = (String) doc.getFieldValue("title");
        String content = (String) doc.getFieldValue("content");
        if (hlMap != null) {
            Map<String, List<String>> docHl = hlMap.get(id);
            if (docHl != null) {
                title = getHlValue(docHl, "title");
                content = getHlValue(docHl, "content");
            }
        }
        System.out.print("id:" + id);
        System.out.print("\ttitle:" + title);
        System.out.print("\tcontent:" + content);
        //System.out.println("\tdate:" + DateUtils.formatDate((Date) doc.getFieldValue("releaseDate"), "yyyy-MM-dd HH:mm"));
    }

    private String getHlValue(Map<String, List<String>> docHl, String field) {
        return docHl.containsKey(field) ? docHl.get(field).get(0) : null;
    }

    public static void main(String[] args) {
        String str = "{\"collectionName\": \"collection_1\", \"params\": [{\"field\": \"upperClothing\", \"type\": \"EQ\", \"value\": [262144]}, {\"field\": \"createTime\", \"type\": \"IN\", \"value\": [\"2018-11-20T13:49:04Z\", \"2018-11-21T00:00:00Z\"]}]}";
        JSONObject jsonObject = JSONObject.parseObject(str);
        JSONArray params = jsonObject.getJSONArray("params");
        SolrQuery query = new SolrIndex().resolveParams(params);
        System.out.println(query.toString());
    }
}
