package com.video.bigdata.bigdatasolr;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.video.bigdata.bigdatasolr.utils.JsonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Table;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author liwen
 * @create 2019-02-21
 * 从文件中导入数据到HBASE
 **/
public class InputDataToHBase {
    private static Configuration conf;
    private static Connection conn;
    private static Admin admin;

    private static void init(){
        conf = HBaseConfiguration.create();
        conf.set("hbase.rootdir","hdfs://master:9000/hbase");
        conf.set("hbase.zookeeper.quorum","master,slave1,slave2,slave3");
        conf.set("hbase.zookeeper.property.clientPort","2181");
        try {
            conn = ConnectionFactory.createConnection(conf);
            admin = conn.getAdmin();
        }catch (IOException e){
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        init();
        String path = "D:\\home\\jsonData.txt";
        FileReader reader = null;
        BufferedReader bufferedReader = null;
        try {
            int i = 0;
            Table table = conn.getTable(TableName.valueOf("video"));
            Put put = null;
            reader = new FileReader(new File(path));
            bufferedReader = new BufferedReader(reader);
            while(bufferedReader.readLine() != null){
                String json = bufferedReader.readLine();
                JSONObject jsonObject = JSON.parseObject(json);
                String rowKey = jsonObject.getString("uuid");
                if(StringUtils.isBlank(rowKey)){
                    continue;
                }
                put = new Put(rowKey.getBytes());
                String colFamily = null;
                Integer objType = jsonObject.getInteger("objType");
                switch (objType){
                    case 1:colFamily = "human";break;
                    case 2:colFamily = "vehicle";break;
                    case 4:colFamily = "ride";break;
                }
                Map<String,Object> map = new ConcurrentHashMap<String,Object>();
                JsonUtils.objectAnalysis(null,jsonObject,map);
                Set<Map.Entry<String, Object>> entries = map.entrySet();
                for(Map.Entry<String, Object> entry : entries){
                    if(entry.getKey().equals("uuid")){
                        continue;
                    }
                    put.addColumn(colFamily.getBytes(),entry.getKey().getBytes(),entry.getValue().toString().getBytes());
                }
                table.put(put);
                put = null;
                i++;
                System.out.println("读完第"+i+"行");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if(bufferedReader != null){
                    bufferedReader.close();
                }
                if(reader != null){
                    reader.close();
                }
                if(admin!=null){
                    admin.close();
                }
                if(conn != null){
                    conn.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}
