package Demo

import NewTest.utils.PropertiesReaderUtils
import cn.jiuling.jni.QstCompareFeatureApiTest
import kafka.serializer.StringDecoder
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.dstream.{DStream, InputDStream}
import org.apache.spark.streaming.kafka.KafkaUtils

import scala.collection.mutable

/**
  * Created by liuxiang on 2018/12/10.
  */
object CalCosDemo {
  def main(args: Array[String]): Unit = {
    //创建sparkConf
    val sparkConf: SparkConf = new SparkConf()
      .setAppName("CalCosDemo")
    //创建sparkContext
    val sc = new SparkContext(sparkConf)
    sc.setLogLevel("WARN")
    //创建StreamingContext
    val ssc = new StreamingContext(sc, Seconds(5))
    //获取读取配置文件工具类
    val prop = PropertiesReaderUtils.getProperties("/conf/path.properties")
    //加载sdk
    System.load(prop.getProperty("qst.sdk1"))
    System.load(prop.getProperty("qst.sdk2"))
    //配置kafka相关参数
    val kafkaParams = Map("metadata.broker.list" -> prop.getProperty("metadata.broker.list"))
    //定义topic
    val topics = Set(prop.getProperty("topic.picture"))
    //通过 KafkaUtils.createDirectStream接受kafka数据，这里采用是kafka低级api偏移量不受zk管理
    val dstream: InputDStream[(String, String)] = KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](ssc, kafkaParams, topics)
    //获取kafka中topic中的数据
    val topicData: DStream[String] = dstream.map(_._2)

    //计算余弦距离
    val cosDist:DStream[Double] = topicData.map(u => {
      val feature =
        ""
      println("feature1:" + u)
      println("feature2:" + feature)
      val result = QstCompareFeatureApiTest.main(u, feature)
      println("result:" + result)
      result
    })

    //对距离由大到小进行排序并取出top10
    val sortedDist = cosDist.foreachRDD(rdd => {
      //插入数据
      rdd.foreach(record => {
        println("result:" + record)
      })
    })

    //开启计算
    ssc.start()
    ssc.awaitTermination()
  }
}
