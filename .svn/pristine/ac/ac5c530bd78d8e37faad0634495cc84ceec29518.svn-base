package com.video.bigdata.bigdatasolr;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.video.bigdata.bigdatasolr.utils.JsonUtils;
import org.junit.Test;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;

public class JsonTest {
    @Test
    public void test2(){
        String str = "{\"uuid\":\"d260be9984694541a98708b779d5b718\",\"objType\":2,\"objId\":74,\"serialNumber\":\"1155403522\",\"bigImgURL\":\"http://127.0.0.1:8082/20181120/13/bg/vehicle_1155403522-000074_st74680_end82840.jpg\",\"imgURL\":\"http://127.0.0.1:8082/20181120/13/thumb/vehicle_1155403522-000074_st74680_end82840_thumb.jpg\",\"startFrameIdx\":1866,\"endFrameIdx\":2070,\"startFramePts\":74680,\"endFramePts\":82840,\"createTime\":\"2018-11-20 13:49:16\",\"firstObj\":0,\"snapshot\":{\"frameIdx\":2052,\"width\":1920,\"height\":1080,\"boundingBox\":{\"x\":918,\"y\":514,\"w\":320,\"h\":328}},\"features\":{\"type\":\"轿车\",\"typeCode\":\"1\",\"safetyBelt\":{\"mainDriver\":\"-1\",\"coDriver\":\"-1\"},\"brandName\":\"\",\"hasCall\":\"-1\",\"hasCrash\":\"-1\",\"hasDanger\":\"-1\",\"colorCode\":7,\"colorName\":\"红\",\"tagNum\":0,\"sun\":\"-1\",\"drop\":\"-1\",\"paper\":\"-1\",\"plateColorName\":\"\",\"plateColorCode\":\"\",\"plateLicence\":\"\",\"hasPlate\":\"0\",\"plateClass\":\"\",\"plateClassCode\":\"\",\"sunRoof\":-1,\"spareTire\":-1,\"rack\":-1,\"plateLocationInfo\":{\"x\":0,\"y\":0,\"w\":0,\"h\":0},\"vehicleConfidence\":0,\"plateConfidence\":0,\"featureType\":1,\"featureData\":\"\"}}\n";
        JSONObject jsonObject = JSON.parseObject(str);
        Map<String,Object> map = new ConcurrentHashMap<String,Object>();
        JsonUtils.objectAnalysis(null,jsonObject,map);
        Set<Map.Entry<String, Object>> entries = map.entrySet();
        for(Map.Entry<String, Object> entry : entries){
            //System.out.println(entry.getKey() + "=" + entry.getValue());
            System.out.println("put 'video', 'd260be9984694541a98708b779d5b718', 'vehicle:"+entry.getKey()+"', '"+entry.getValue()+"'");
        }
    }
    @Test
    public void test3(){
        SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        Date t = new Date();
        System.out.println(df1.format(t));
        df1.setTimeZone(TimeZone.getTimeZone("UTC"));
        System.out.println(df1.format(t));
    }

}
