package com.video.bigdata.bigdatasolr;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.video.bigdata.bigdatasolr.constant.ObjType;
import com.video.bigdata.bigdatasolr.utils.JsonUtils;
import org.junit.Test;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class JsonTest {
    @Test
    public void test2(){
        String str = "{\"uuid\":\"a04eab100ca04005b884290330619ead\",\"objType\":1,\"objId\":671,\"serialNumber\":\"1155403522\",\"bigImgURL\":\"http://127.0.0.1:8082/20181120/13/bg/human_1155403522-000671_st633640_end636520.jpg\",\"imgURL\":\"http://127.0.0.1:8082/20181120/13/thumb/human_1155403522-000671_st633640_end636520_thumb.jpg\",\"startFrameIdx\":15840,\"endFrameIdx\":15912,\"startFramePts\":633640,\"endFramePts\":636520,\"createTime\":\"2018-11-20 13:50:43\",\"firstObj\":0,\"snapshot\":{\"frameIdx\":15876,\"width\":1920,\"height\":1080,\"boundingBox\":{\"x\":632,\"y\":68,\"w\":52,\"h\":134}},\"upperClothing\":262144,\"lowerClothing\":1048576,\"features\":{\"faceBoundingBox\":{\"x\":0,\"y\":0,\"h\":0,\"w\":0},\"faceUrl\":\"\",\"coatStyle\":{\"code\":1,\"value\":\"长袖\"},\"trousersStyle\":{\"code\":1,\"value\":\"长裤\"},\"respirator\":-1,\"coatTexture\":1,\"cap\":0,\"hairStyle\":1,\"trousersTexture\":1,\"luggage\":-1,\"trolley\":-1,\"coatColor1\":{\"code\":\"343174\",\"value\":\"棕(卡其)\"},\"coatColor2\":{\"code\":\"-1\",\"value\":\"\"},\"trousersColor1\":{\"code\":\"0\",\"value\":\"黑(深灰)\"},\"trousersColor2\":{\"code\":\"-1\",\"value\":\"\"},\"sex\":2,\"age\":8,\"angle\":512,\"bag\":0,\"carryBag\":0,\"glasses\":0,\"umbrella\":1,\"featureType\":1,\"featureData\":\"\"}}\n";
        JSONObject jsonObject = JSON.parseObject(str);
        Map<String,Object> map = new ConcurrentHashMap<String,Object>();
        JsonUtils.objectAnalysis(null,jsonObject,map);
        Set<Map.Entry<String, Object>> entries = map.entrySet();
        for(Map.Entry<String, Object> entry : entries){
            //System.out.println(entry.getKey() + "=" + entry.getValue());
            System.out.println("put 'video', 'a04eab100ca04005b884290330619ead', 'human:"+entry.getKey()+"', '"+entry.getValue()+"'");
        }
    }
    @Test
    public void test3(){
        SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        Date t = new Date();
        System.out.println(df1.format(t));
        df1.setTimeZone(TimeZone.getTimeZone("UTC"));
        System.out.println(df1.format(t));
    }
    @Test
    public void test4(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        List<Map> list = new ArrayList<>();
        for (int i = 0 ;i< 5;i++){
            Map<String,Object> map = new HashMap<>();
            map.put("key"+i,sdf.format(new Date()));
            map.put("key"+i+i,sdf.format(new Date()));
            list.add(map);
        }
        String s = JSON.toJSONString(list);
        System.out.println(s);
    }
    @Test
    public void test5(){
        System.out.println(ObjType.HUMAN);
    }

}
